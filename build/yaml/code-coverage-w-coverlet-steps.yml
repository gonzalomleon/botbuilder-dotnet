steps:
- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    projects: |
     Tests/**/*Facebook.Tests.csproj
    arguments: '-v n --configuration debug --no-build --no-restore --filter "TestCategory!=IgnoreInAutomatedBuild&TestCategory!=FunctionalTests" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
    /p:ExcludeByFile=
    \".*/WebexMessageRequest.cs,
      .*/WebexClientWrapper.cs,
      .*/TwilioMessage.cs,
      .*/TwilioAdapterOptions.cs,
      .*/NewSlackMessage.cs,
      .*/SlackResponse.cs,
      .*/ActivityResourceResponse.cs,
      .*/SlackAdapterOptions.cs,
      .*/SlackClientWrapper.cs,
      .*/SlackMessage.cs,
      .*/SlackAction.cs,
      .*/SlackEvent.cs,
      .*/SlackPayload.cs,
      .*/SlackRequestBody.cs,
      .*/Button.cs,
      .*/DefaultAction.cs,
      .*/Element.cs,
      .*/FacebookAttachment.cs,
      .*/FacebookBotUser.cs,
      .*/FacebookEntry.cs,
      .*/FacebookPostback.cs,
      .*/FacebookRecipient.cs,
      .*/FacebookResponseEvent.cs,
      .*/FacebookResponseOk.cs,
      .*/FacebookQuickReply.cs,
      .*/MessagePayload.cs,
      .*/FacebookPassThreadControl.cs,
      .*/FacebookRequestThreadControl.cs,
      .*/FacebookTakeThreadControl.cs,
      .*/FacebookThreadControl.cs,
      .*/HandoverConstants.cs,
      .*/AttachmentPayload.cs,
      .*/CommonRegexParser.cs,
      .*/ExpressionParser.cs,
      .*/LGFileParser.cs"'

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage '
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
